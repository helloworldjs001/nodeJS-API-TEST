{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2024-08-11T10:37:55.620Z",
    "end": "2024-08-11T10:37:55.686Z",
    "duration": 66,
    "testsRegistered": 11,
    "passPercent": 90.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ad0689f5-6d25-4310-a8c9-381b585dce2f",
      "title": "",
      "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
      "file": "/test/api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "69011762-4e71-44df-affd-4fa062213e86",
          "title": "Resource API",
          "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
          "file": "/test/api.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource API\"",
              "fullTitle": "Resource API \"before all\" hook in \"Resource API\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Dynamically import `chai` and destructure `expect`\n({ expect } = await import('chai'));",
              "err": {},
              "uuid": "0e4e7f31-1814-4773-8f96-4babb79f9bfa",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve all resources",
              "fullTitle": "Resource API should retrieve all resources",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "3da33b77-0435-4584-96ef-960f19b85ed7",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a specific resource by ID",
              "fullTitle": "Resource API should retrieve a specific resource by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', 'Resource 1');",
              "err": {},
              "uuid": "65b00829-7864-445b-8564-af0e7a1a28b6",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for a non-existent resource ID",
              "fullTitle": "Resource API should return 404 for a non-existent resource ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource/99');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "daf36a1f-9ce0-463d-8fdc-39ec07ea3f56",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new resource",
              "fullTitle": "Resource API should create a new resource",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newResource = { name: 'Resource 3', type: 'Type C' };\nconst res = await request(app)\n    .post('/resource')\n    .send(newResource);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');",
              "err": {},
              "uuid": "8d0f1d43-8321-44c1-a9ec-7694e946342d",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing resource",
              "fullTitle": "Resource API should update an existing resource",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedResource = { name: 'Updated Resource', type: 'Updated Type' };\nconst res = await request(app)\n    .put('/resource/1')\n    .send(updatedResource);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Resource updated');",
              "err": {},
              "uuid": "21c44baf-7a65-43b5-87c8-6a90969e9a9e",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for updating a non-existent resource",
              "fullTitle": "Resource API should return 404 for updating a non-existent resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedResource = { name: 'Non-existent Resource', type: 'Non-existent Type' };\nconst res = await request(app)\n    .put('/resource/99')\n    .send(updatedResource);\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "9ff44cf9-9eef-4735-ae38-e7698a362c9f",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a specific resource",
              "fullTitle": "Resource API should delete a specific resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/resource/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Resource deleted');",
              "err": {},
              "uuid": "045690ad-2ad2-4b89-9414-a5a980cc1501",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for deleting a non-existent resource",
              "fullTitle": "Resource API should return 404 for deleting a non-existent resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/resource/99');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "62d2bcd3-4193-48b2-a72c-063f9e3d1a52",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access a secure resource with valid authorization",
              "fullTitle": "Resource API should access a secure resource with valid authorization",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/secure-resource')\n    .set('Authorization', 'Bearer valid_token');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Secure Resource Accessed');",
              "err": {},
              "uuid": "114beb94-b1ef-4c77-b62a-fd6142b6d570",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 for unauthorized access",
              "fullTitle": "Resource API should return 401 for unauthorized access",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/secure-resource')\n    .set('Authorization', 'Bearer invalid_token');\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error', 'Unauthorized');",
              "err": {},
              "uuid": "3cd1556a-5db4-4ba8-8d15-75a62fe9fc37",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a resource in XML format",
              "fullTitle": "Resource API should retrieve a resource in XML format",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/xml-resource');\nexpect(res.status).to.equal(200);\nexpect(res.headers['content-type']).to.equal('application/xml');\nexpect(res.text).to.include('<resource>');",
              "err": {
                "message": "AssertionError: expected 'application/xml; charset=utf-8' to equal 'application/xml'",
                "estack": "AssertionError: expected 'application/xml; charset=utf-8' to equal 'application/xml'\n    at Context.<anonymous> (test/api.test.js:88:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- application/xml; charset=utf-8\n+ application/xml\n"
              },
              "uuid": "da0f8e57-c848-4765-81dd-c549d2a7e9c5",
              "parentUUID": "69011762-4e71-44df-affd-4fa062213e86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3da33b77-0435-4584-96ef-960f19b85ed7",
            "65b00829-7864-445b-8564-af0e7a1a28b6",
            "daf36a1f-9ce0-463d-8fdc-39ec07ea3f56",
            "8d0f1d43-8321-44c1-a9ec-7694e946342d",
            "21c44baf-7a65-43b5-87c8-6a90969e9a9e",
            "9ff44cf9-9eef-4735-ae38-e7698a362c9f",
            "045690ad-2ad2-4b89-9414-a5a980cc1501",
            "62d2bcd3-4193-48b2-a72c-063f9e3d1a52",
            "114beb94-b1ef-4c77-b62a-fd6142b6d570",
            "3cd1556a-5db4-4ba8-8d15-75a62fe9fc37"
          ],
          "failures": [
            "da0f8e57-c848-4765-81dd-c549d2a7e9c5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}