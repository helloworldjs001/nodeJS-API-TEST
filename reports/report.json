{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-10T11:13:25.983Z",
    "end": "2024-08-10T11:13:26.164Z",
    "duration": 181,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "61a32a42-8403-4c5a-89cc-dcf7c9a11d45",
      "title": "",
      "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
      "file": "/test/api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
          "title": "Users API",
          "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
          "file": "/test/api.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users API\"",
              "fullTitle": "Users API \"before all\" hook in \"Users API\"",
              "timedOut": false,
              "duration": 59,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ expect } = await import('chai'));\nconst res = await request(app)\n    .post('/api/auth/login')\n    .send({ email: 'alice@example.com', password: 'password1' });\ntoken = res.body.token;",
              "err": {},
              "uuid": "66e40d24-1ecd-4af0-800f-bbabcc7da9ce",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user and return a token",
              "fullTitle": "Users API should login a user and return a token",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/auth/login')\n    .send({ email: 'alice@example.com', password: 'password1' });\nexpect(res.statusCode).to.equal(200); // Use `.equal` instead of `.toEqual`\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "d5381aa3-71a8-4632-8456-2b5c14c60650",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 for invalid password",
              "fullTitle": "Users API should return 401 for invalid password",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/auth/login')\n    .send({ email: 'alice@example.com', password: 'wrongpassword' });\nexpect(res.statusCode).to.equal(401);\nexpect(res.text).to.equal('Invalid password');",
              "err": {},
              "uuid": "69f3ca5e-2d60-4db4-80fb-a47b329cf784",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all users if authenticated",
              "fullTitle": "Users API should return all users if authenticated",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/api/users')\n    .set('x-access-token', token);\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.have.lengthOf(2);",
              "err": {},
              "uuid": "b0edf9e0-7342-4c85-8718-3bec5af98753",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 if no token is provided",
              "fullTitle": "Users API should return 403 if no token is provided",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/users');\nexpect(res.statusCode).to.equal(403);\nexpect(res.text).to.equal('No token provided');",
              "err": {},
              "uuid": "1e9c42b9-05f0-435f-8636-b116d8c00481",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user with valid data",
              "fullTitle": "Users API should create a new user with valid data",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = { name: 'Charlie', email: 'charlie@example.com', password: 'password3' };\nconst res = await request(app)\n    .post('/api/users')\n    .set('x-access-token', token)\n    .send(newUser);\nexpect(res.statusCode).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('name', 'Charlie');",
              "err": {},
              "uuid": "1f762753-1616-4eed-848a-f388bfecad34",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid user data",
              "fullTitle": "Users API should return 400 for invalid user data",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = { name: '', email: 'invalid-email', password: '123' };\nconst res = await request(app)\n    .post('/api/users')\n    .set('x-access-token', token)\n    .send(invalidUser);\nexpect(res.statusCode).to.equal(400);\nexpect(res.body).to.have.property('errors');",
              "err": {},
              "uuid": "530f3fde-cb21-4032-9850-2f878726200e",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user not found",
              "fullTitle": "Users API should return 404 if user not found",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/api/users/99')\n    .set('x-access-token', token);\nexpect(res.statusCode).to.equal(404);\nexpect(res.text).to.equal('User not found');",
              "err": {},
              "uuid": "831bbc56-98e2-45a8-a5bd-a7e6c6cb7b7e",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing user",
              "fullTitle": "Users API should update an existing user",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = { name: 'Alice Updated', email: 'alice.updated@example.com', password: 'newpassword' };\nconst res = await request(app)\n    .put('/api/users/1')\n    .set('x-access-token', token)\n    .send(updatedUser);\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.have.property('name', 'Alice Updated');",
              "err": {},
              "uuid": "3fbd707e-f186-4f2f-a0ee-315c52d2cb26",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if trying to update a non-existent user",
              "fullTitle": "Users API should return 404 if trying to update a non-existent user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = { name: 'Nonexistent', email: 'nonexistent@example.com', password: 'password' };\nconst res = await request(app)\n    .put('/api/users/99')\n    .set('x-access-token', token)\n    .send(updatedUser);\nexpect(res.statusCode).to.equal(404);\nexpect(res.text).to.equal('User not found');",
              "err": {},
              "uuid": "39a101e1-8334-445a-beb2-d6b20d431161",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "Users API should delete a user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete('/api/users/1')\n    .set('x-access-token', token);\nexpect(res.statusCode).to.equal(204);",
              "err": {},
              "uuid": "fd7fb4bf-6239-4b8c-af78-1d7820dc7afa",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if trying to delete a non-existent user",
              "fullTitle": "Users API should return 404 if trying to delete a non-existent user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete('/api/users/99')\n    .set('x-access-token', token);\nexpect(res.statusCode).to.equal(404);\nexpect(res.text).to.equal('User not found');",
              "err": {},
              "uuid": "53ec1b95-ce1e-448e-92a8-86b21217f8be",
              "parentUUID": "73fd449c-fe1b-48e4-ac00-67b584d2f988",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5381aa3-71a8-4632-8456-2b5c14c60650",
            "69f3ca5e-2d60-4db4-80fb-a47b329cf784",
            "b0edf9e0-7342-4c85-8718-3bec5af98753",
            "1e9c42b9-05f0-435f-8636-b116d8c00481",
            "1f762753-1616-4eed-848a-f388bfecad34",
            "530f3fde-cb21-4032-9850-2f878726200e",
            "831bbc56-98e2-45a8-a5bd-a7e6c6cb7b7e",
            "3fbd707e-f186-4f2f-a0ee-315c52d2cb26",
            "39a101e1-8334-445a-beb2-d6b20d431161",
            "fd7fb4bf-6239-4b8c-af78-1d7820dc7afa",
            "53ec1b95-ce1e-448e-92a8-86b21217f8be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}