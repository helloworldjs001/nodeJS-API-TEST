{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-11T10:39:13.872Z",
    "end": "2024-08-11T10:39:13.941Z",
    "duration": 69,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eedb529d-3c59-4035-b83d-75328db9979c",
      "title": "",
      "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
      "file": "/test/api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
          "title": "Resource API",
          "fullFile": "/home/gaian/Desktop/New Folder/api-testing-project/test/api.test.js",
          "file": "/test/api.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource API\"",
              "fullTitle": "Resource API \"before all\" hook in \"Resource API\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Dynamically import `chai` and destructure `expect`\n({ expect } = await import('chai'));",
              "err": {},
              "uuid": "ada5a455-5a41-417a-a882-7a065ecd0a50",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve all resources",
              "fullTitle": "Resource API should retrieve all resources",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('object');",
              "err": {},
              "uuid": "436b560b-0c92-4f1c-8b0d-690365d54c64",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a specific resource by ID",
              "fullTitle": "Resource API should retrieve a specific resource by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', 'Resource 1');",
              "err": {},
              "uuid": "2b886b7b-81a7-47ff-af45-562b4384645d",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for a non-existent resource ID",
              "fullTitle": "Resource API should return 404 for a non-existent resource ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/resource/99');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "fcab756a-f834-431e-8cda-c5992b809c8b",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new resource",
              "fullTitle": "Resource API should create a new resource",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newResource = { name: 'Resource 3', type: 'Type C' };\nconst res = await request(app)\n    .post('/resource')\n    .send(newResource);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');",
              "err": {},
              "uuid": "a9c7227f-f7a1-474f-9ee3-366e3327f9f0",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing resource",
              "fullTitle": "Resource API should update an existing resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedResource = { name: 'Updated Resource', type: 'Updated Type' };\nconst res = await request(app)\n    .put('/resource/1')\n    .send(updatedResource);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Resource updated');",
              "err": {},
              "uuid": "e1848c5b-a61f-417e-b4b4-79952041f86d",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for updating a non-existent resource",
              "fullTitle": "Resource API should return 404 for updating a non-existent resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedResource = { name: 'Non-existent Resource', type: 'Non-existent Type' };\nconst res = await request(app)\n    .put('/resource/99')\n    .send(updatedResource);\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "82ea6cf4-1f84-45fb-83f9-13e198c499e6",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a specific resource",
              "fullTitle": "Resource API should delete a specific resource",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/resource/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Resource deleted');",
              "err": {},
              "uuid": "6fcdc0b5-5707-4173-841e-25abef84ad4b",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for deleting a non-existent resource",
              "fullTitle": "Resource API should return 404 for deleting a non-existent resource",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/resource/99');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Resource not found');",
              "err": {},
              "uuid": "44e9a323-c6ea-4bfb-ab74-91ccc4d7dc31",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access a secure resource with valid authorization",
              "fullTitle": "Resource API should access a secure resource with valid authorization",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/secure-resource')\n    .set('Authorization', 'Bearer valid_token');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Secure Resource Accessed');",
              "err": {},
              "uuid": "c71e1387-020f-4c6c-a931-f98f70601a1a",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 for unauthorized access",
              "fullTitle": "Resource API should return 401 for unauthorized access",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/secure-resource')\n    .set('Authorization', 'Bearer invalid_token');\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error', 'Unauthorized');",
              "err": {},
              "uuid": "3f49637a-aee1-4555-8cde-f872561fb5c4",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a resource in XML format",
              "fullTitle": "Resource API should retrieve a resource in XML format",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/xml-resource');\nexpect(res.status).to.equal(200);\nexpect(res.headers['content-type']).to.include('application/xml'); // Update to check for inclusion\nexpect(res.text).to.include('<resource>');",
              "err": {},
              "uuid": "fdf97795-2b8b-4811-96b2-ff267d6d53d3",
              "parentUUID": "41ce201d-b7ea-4de3-af2d-7a2ea387512f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "436b560b-0c92-4f1c-8b0d-690365d54c64",
            "2b886b7b-81a7-47ff-af45-562b4384645d",
            "fcab756a-f834-431e-8cda-c5992b809c8b",
            "a9c7227f-f7a1-474f-9ee3-366e3327f9f0",
            "e1848c5b-a61f-417e-b4b4-79952041f86d",
            "82ea6cf4-1f84-45fb-83f9-13e198c499e6",
            "6fcdc0b5-5707-4173-841e-25abef84ad4b",
            "44e9a323-c6ea-4bfb-ab74-91ccc4d7dc31",
            "c71e1387-020f-4c6c-a931-f98f70601a1a",
            "3f49637a-aee1-4555-8cde-f872561fb5c4",
            "fdf97795-2b8b-4811-96b2-ff267d6d53d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 50,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}